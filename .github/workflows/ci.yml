name: CI Pipeline Secure

on:
  push:
    branches: [ main ]
  workflow_dispatch: 

jobs:
  # Analyse statique
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true

      - name: Run Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--verbose --redact"
        continue-on-error: true


  # Build et scan image Docker
  docker-scan:
    needs: sast
    runs-on: ubuntu-latest
    outputs:
      image_digest: ${{ steps.get_digest.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Docker Hub Token
        id: get_token
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_TOKEN }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          echo "TOKEN=$(echo "$TOKEN" | tr -d '\n')" >> $GITHUB_ENV
      - name: Get Docker image tags list
        id: get_tags_list
        run: |
          TAG_LIST=$(curl -s -H "Authorization: JWT $TOKEN"   https://hub.docker.com/v2/repositories/stephanehamaili/webapp/tags)
          LATEST_TAG=$(echo "$TAG_LIST" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV

      # ðŸ”¹ IncrÃ©mentation automatique (ex: 1.0.3 â†’ 1.0.4)
      - name: Increment tag
        id: increment_tag
        run: |
          NEW_PATCH=$((PATCH + 1))
          echo "NEW_PATCH=$NEW_PATCH" >> $GITHUB_ENV

      # ðŸ”¹ Build Docker image avec les nouveaux tags
      - name: Build Docker image
        run: |
          NEW_TAG="${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.NEW_PATCH }}"
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:$NEW_TAG -t ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest ./appWithDB/app

      # ðŸ”¹ Scan de l'image avec Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:${{ env.new_tag }}
          format: 'table'
          output: 'trivy-scan-report.json'
          exit-code: '0'  # Faille => build n'Ã©choue pas. Passer Ã  1 pour que Ã§a Ã©choue en cas de failles
      
      
      # ðŸ”¹ Connexion Ã  Docker Hub
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin


      # ðŸ”¹ Push des images (nouvelle version + latest)
      - name: Push Docker image
        run: |
          NEW_TAG="${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.NEW_PATCH }}"
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:$NEW_TAG
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest
      - name: Get image digest
        id: get_digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest | cut -d'@' -f2)
          echo "Digest: $DIGEST"
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT


  # ðŸ”¹ Mise Ã  jour du hash dans le fichier values.yaml du repo helm
  helm-hash-update:
    needs: docker-scan
    runs-on: ubuntu-latest
    steps:   
      - name: RÃ©cupÃ©rer le digest de l'image pushÃ©e
        id: get_digest
        run: |
          DIGEST=${{ needs.docker-scan.outputs.image_digest }}
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Cloner le repo Helm
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git clone https://x-access-token:${{ secrets.GIT_TOKEN_REPO_HELM }}@github.com/${{ secrets.GIT_USERNAME }}/${{ vars.HELM_REPOSITORY_NAME }}
          cd ${{ vars.HELM_REPOSITORY_PATH }}
          ls
          cat ./values.yaml | grep repository
          
          # Remplacer l'image dans values.yaml (adapte selon ta structure YAML)
          sed -i "s|repository:.*|repository: '${{ secrets.DOCKER_HUB_USERNAME }}/webapp@${{ env.IMAGE_DIGEST }}'|" ./values.yaml
          cat ./values.yaml | grep repository
          
          # git add ./values.yaml
          # git commit -m "Update image to ${{ env.IMAGE_DIGEST }} from CI"
          # git push origin main
