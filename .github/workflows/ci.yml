name: CI Pipeline Secure

on:
  push:
    branches: [ main ]

jobs:
  # Analyse statique
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true

      - name: Run Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--verbose --redact"
        continue-on-error: true


  # Build et scan image Docker
  docker-scan:
    needs: sast
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Docker Hub Token
        id: get_token
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d '{"username": "$DOCKER_HUB_USERNAME", "password": "$DOCKER_HUB_TOKEN"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          test="$DOCKER_HUB_USERNAME"
          echo "token=${TOKEN:0:5}\nusername=${test:0:5}"
          echo "token2=${DOCKER_HUB_USERNAME:0:5}"
          echo "token=$TOKEN" >> $GITHUB_ENV

      - name: Get Docker image tags list
        id: get_tags_list
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          TAG_LIST=$(curl -s -H "Authorization: JWT $TOKEN"   https://hub.docker.com/v2/repositories/stephanehamaili/webapp/tags)
          echo "$TAG_LIST" >> $GITHUB_ENV

      # ðŸ”¹ RÃ©cupÃ©rer le dernier tag de lâ€™image Docker Hub
      - name: Get latest Docker image tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(echo "$TAG_LIST" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last')
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      # ðŸ”¹ IncrÃ©mentation automatique (ex: 1.0.3 â†’ 1.0.4)
      - name: Increment tag
        id: increment_tag
        run: |
          LATEST_TAG=${{ env.latest_tag }}
          IFS='.' read -r -a parts <<< "$LATEST_TAG"
          NEW_TAG="${parts[0]}.${parts[1]}.$((parts[2] + 1))"
          echo "New tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_ENV

      # ðŸ”¹ Build Docker image avec les nouveaux tags
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:${{ env.new_tag }} -t ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest .

      # ðŸ”¹ Scan de l'image avec Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:${{ env.new_tag }}
          format: 'table'
          output: 'trivy-scan-report.json'
          exit-code: '0'  # Faille => build n'Ã©choue pas. Passer Ã  1 pour que Ã§a Ã©choue en cas de failles
      
      
      # ðŸ”¹ Connexion Ã  Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin


      # ðŸ”¹ Push des images (nouvelle version + latest)
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:${{ env.new_tag }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:latest
          
