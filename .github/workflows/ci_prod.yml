name: Prod CI Pipeline Secure

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch: 


permissions:
  contents: write
  pull-requests: write  # créer ou commenter une PR

jobs:
   # Analyse statique
  sast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        continue-on-error: true

      - name: Run Gitleaks (secrets scan)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: "--verbose --redact"
        continue-on-error: true

  semantic-versioning:
    runs-on: ubuntu-latest
    needs: sast
    outputs:
      version_type: ${{ steps.determine_version.outputs.VERSION_TYPE }}
      diff_file: ${{ steps.get_diff.outputs.DIFF_FILE }}
      new_tag: ${{ steps.increment_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Print PR diff
        run: |
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.merge_commit_sha }}

          echo "🔍 Diff from $BASE_SHA to $HEAD_SHA:"
          git diff $BASE_SHA $HEAD_SHA > pr_diff.txt
          cat pr_diff.txt

      # - name: Get list of changed files
      #   id: get_diff
      #   run: |
      #     echo "Diff from ${{ github.event.before }} to ${{ github.sha }}"
          
      #     # Récupérer la liste des fichiers modifiés (hors CHANGELOG.md)
      #     CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -v CHANGELOG.md | tr '\n' ' ')
      #     echo "CHANGED_FILES=$CHANGED_FILES"
          
      #     # Créer un fichier temporaire pour stocker le contenu des diffs
      #     DIFF_FILE="diff_content.txt"
      #     > $DIFF_FILE  # Crée ou vide le fichier

      #     # Récupérer le contenu des différences pour chaque fichier modifié
      #     for file in $CHANGED_FILES; do
      #       echo "Processing file: $file" >> $DIFF_FILE
      #       git diff ${{ github.event.before }} ${{ github.sha }} -- $file >> $DIFF_FILE
      #       echo -e "\n\n" >> $DIFF_FILE  # Ajouter une séparation entre les diffs des fichiers
      #     done

      #     echo "Diff content saved to: $DIFF_FILE"
      #     echo "Diff content = $(cat $DIFF_FILE)"
      #     # Sauvegarder le chemin du fichier dans une variable d'environnement pour l'utiliser dans une étape suivante
      #     echo "DIFF_FILE=$DIFF_FILE" >> $GITHUB_ENV
      #     echo "DIFF_FILE=$DIFF_FILE" >> $GITHUB_OUTPUT

      - name: Get Docker Hub Token
        id: get_token
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_TOKEN }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          echo "TOKEN=$(echo "$TOKEN" | tr -d '\n')" >> $GITHUB_ENV

      - name: Get Docker image tags list
        id: get_tags_list
        run: |
          TAG_LIST=$(curl -s -H "Authorization: JWT $TOKEN"   https://hub.docker.com/v2/repositories/stephanehamaili/webapp/tags)
          LATEST_TAG=$(echo "$TAG_LIST" | jq -r '.results | map(.name) | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort | last')
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV


      - name: Determine version type with OpenAI
        id: determine_version
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AI_SYSTEM_PROMPT: ${{ vars.AI_VERSIONING_SYSTEM_PROMPT }}
          AI_USER_PROMPT: ${{ vars.AI_VERSIONING_USER_PROMPT }}
        run: |
          # Lire le fichier de diffs et envoyer son contenu à Hugging Face
          cat pr_diff.txt  # Juste pour déboguer et voir le contenu du fichier

          JSON_PAYLOAD=$(jq -n \
            --arg model "gpt-3.5-turbo" \
            --arg content_system "$AI_SYSTEM_PROMPT" \
            --arg content_user "$AI_USER_PROMPT $(cat pr_diff.txt)" \
            '{
              model: $model,
              messages: [
                { role: "system", content: $content_system },
                { role: "user", content: $content_user }
              ],
              temperature: 0
            }'
          )

          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")
          
          echo $RESPONSE
          VERSION_TYPE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content' | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "Version type detected: $VERSION_TYPE"

      # 🔹 Incrémentation automatique (ex: 1.0.3 → 1.0.4)
      - name: Increment tag
        id: increment_tag
        run: |
          VERSION_TYPE="${{ env.VERSION_TYPE }}"
          case "$VERSION_TYPE" in
            MAJOR)
              MAJOR_VALUE=$((${{ env.MAJOR }} + 1))
              MINOR_VALUE=0
              PATCH_VALUE=0
              ;;
            MINOR)
              MAJOR_VALUE=${{ env.MAJOR }}
              MINOR_VALUE=$((${{ env.MINOR }} + 1))
              PATCH_VALUE=0
              ;;
            PATCH)
              MAJOR_VALUE=${{ env.MAJOR }}
              MINOR_VALUE=${{ env.MINOR }}
              PATCH_VALUE=$((${{ env.PATCH }} + 1))
              ;;
            *)
              echo "Unknown version type"
              exit 1
              ;;
          esac

          echo "MAJOR=$MAJOR_VALUE" 
          echo "MINOR=$MINOR_VALUE" 
          echo "PATCH=$PATCH_VALUE" 

          echo "MAJOR=$MAJOR_VALUE" >> $GITHUB_ENV
          echo "MINOR=$MINOR_VALUE" >> $GITHUB_ENV
          echo "PATCH=$PATCH_VALUE" >> $GITHUB_ENV

          NEW_TAG="$MAJOR_VALUE.$MINOR_VALUE.$PATCH_VALUE"
          echo "NEW_TAG=$NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      
      - name: Generate changelog entry with OpenAI
        id: generate_changelog
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AI_CHANGELOG_SYSTEM_PROMPT: ${{ vars.AI_CHANGELOG_SYSTEM_PROMPT }}
          AI_CHANGELOG_USER_PROMPT: ${{ vars.AI_CHANGELOG_USER_PROMPT }}
        run: |
            JSON_PAYLOAD=$(jq -n \
              --arg model "gpt-3.5-turbo" \
              --arg content_system "$AI_CHANGELOG_SYSTEM_PROMPT" \
              --arg content_user "$AI_CHANGELOG_USER_PROMPT $(cat pr_diff.txt)" \
              '{
                model: $model,
                messages: [
                  { role: "system", content: $content_system },
                  { role: "user", content: $content_user }
                ],
                temperature: 0
              }'
            )
  
            RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD")
  
            echo "AI_CHANGELOG_SYSTEM_PROMPT: $AI_CHANGELOG_SYSTEM_PROMPT"
            echo "AI_CHANGELOG_USER_PROMPT: $AI_CHANGELOG_USER_PROMPT"
            echo "DIFF_FILE: $(cat pr_diff.txt)"
            cat pr_diff.txt
            echo $RESPONSE
            CHANGELOG_LINE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content' | sed 's/^/- /')
            echo $CHANGELOG_LINE > changelog_line.txt
            echo "Generated changelog entry: $CHANGELOG_LINE"
      
      # 🔹 Update CHANGELOG.md
      - name: Update CHANGELOG.md
        id: update_changelog
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo -e "## [$NEW_TAG] - $DATE\n$(cat changelog_line.txt)\n\n$(cat CHANGELOG.md)" > CHANGELOG.md

      # 🔹 Commit and push changelog
      - name: Commit and push changelog
        id: commit_and_push_changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull origin main
          git add CHANGELOG.md
          git commit -m "Update changelog for new $VERSION_TYPE release" || echo "No changes to commit"
          git push origin main


  # Build et scan image Docker
  docker-scan:
    needs: [sast, semantic-versioning]
    runs-on: ubuntu-latest
    outputs:
      image_digest: ${{ steps.get_digest.outputs.IMAGE_DIGEST }}
      new_tag: ${{ steps.increment_tag.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Docker Hub Token
        id: get_token
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_HUB_USERNAME }}", "password": "${{ secrets.DOCKER_HUB_TOKEN }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          echo "TOKEN=$(echo "$TOKEN" | tr -d '\n')" >> $GITHUB_ENV
      
      - name: Build Docker image
        id: build_docker_image
        run: |
          NEW_TAG=${{ needs.semantic-versioning.outputs.new_tag }}
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:$NEW_TAG ./appWithDB/app

      # 🔹 Scan de l'image avec Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:${{ env.NEW_TAG }}
          format: 'table'
          output: 'trivy-scan-report.json'
          exit-code: '0'  # Faille => build n'échoue pas. Passer à 1 pour que ça échoue en cas de failles
      
      
      # 🔹 Connexion à Docker Hub
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin


      # 🔹 Push des images (nouvelle version + latest)
      - name: Push Docker image
        run: |
          NEW_TAG=${{ needs.semantic-versioning.outputs.new_tag }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:$NEW_TAG

      - name: Get image digest
        id: get_digest
        run: |
          NEW_TAG=${{ needs.semantic-versioning.outputs.new_tag }}
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:$NEW_TAG | cut -d'@' -f2)
          echo "Digest: $DIGEST"
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_OUTPUT


  # 🔹 Mise à jour du hash dans le fichier values.yaml du repo helm
  helm-hash-update:
    needs: [docker-scan, semantic-versioning]
    runs-on: ubuntu-latest
    steps:   
      # - name: Get image digest
      #   id: get_digest
      #   run: |
      #     NEW_TAG=${{ needs.semantic-versioning.outputs.new_tag }}
      #     DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_HUB_USERNAME }}/webapp:$NEW_TAG | cut -d'@' -f2)
      #     echo "Digest: $DIGEST"
      #     echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Cloner le repo Helm
        run: |
          IMAGE_DIGEST=${{ needs.docker-scan.outputs.image_digest }}
          echo "IMAGE_DIGEST=$IMAGE_DIGEST" >> $GITHUB_ENV
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git clone https://x-access-token:${{ secrets.GIT_TOKEN_REPO_HELM }}@github.com/${{ secrets.GIT_USERNAME }}/${{ vars.HELM_REPOSITORY_NAME }}
          cd ${{ vars.HELM_REPOSITORY_PATH }}
          ls 
          cat ./values.yaml | grep repository
          
          # Remplacer l'image dans values.yaml (adapte selon ta structure YAML)
          sed -i "s|repository:.*|repository: '${{ secrets.DOCKER_HUB_USERNAME }}/webapp@$IMAGE_DIGEST'|" ./values.yaml
          cat ./values.yaml | grep repository
          
          git add ./values.yaml
          git commit -m "Update image to $IMAGE_DIGEST from CI"
          git push origin main
